openapi: 3.0.0
info:
  title: E-commerce Store Management API
  version: 1.0.0
paths:
  /api/users:
    get:
      summary: Get the list of users
      responses:
        '200':
          description: Success, returns the list of users.

    post:
      summary: Create a new user
      requestBody:
        description: User data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Success, new user created.

  /api/users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success, returns the requested user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.

    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user
          schema:
            type: integer
            format: int32
      requestBody:
        description: User data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success, user updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.

    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Success, user deleted.

  /api/orders:
    get:
      summary: Get the list of orders
      responses:
        '200':
          description: Success, returns the list of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders'

    post:
      summary: Create a new order
      requestBody:
        description: Order data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Orders'
      responses:
        '201':
          description: Success, new order created.

  /api/orders/{id}:
    get:
      summary: Get an order by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the order
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success, returns the requested order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        '404':
          description: Order not found.

    put:
      summary: Update an order by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the order
          schema:
            type: integer
            format: int32
      requestBody:
        description: Order data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Orders'
      responses:
        '200':
          description: Success, order updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        '404':
          description: Order not found.

    delete:
      summary: Delete an order by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the order
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Success, order deleted.

  /api/contains:
    get:
      summary: Get all contains
      description: Retrieve the complete list of contains.
      responses:
        '200':
          description: Success, returns the complete list of contains.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contain'
    post:
      summary: Add a new contain
      description: Add a new contain to the list.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contain'
      responses:
        '201':
          description: Contain created successfully.
    put:
      summary: Update an existing contain
      description: Update the details of an existing contain.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the contain to update.
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contain'
      responses:
        '204':
          description: Contain updated successfully.
    delete:
      summary: Delete an existing contain
      description: Delete an existing contain from the list.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the contain to delete.
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Contain deleted successfully.

  /api/articletypes:
    get:
      summary: Get all article types
      description: Retrieve the complete list of article types.
      responses:
        '200':
          description: Success, returns the complete list of article types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleType'
    post:
      summary: Add a new article type
      description: Add a new article type to the list.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleType'
      responses:
        '201':
          description: Article type created successfully.
    put:
      summary: Update an existing article type
      description: Update the details of an existing article type.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the article type to update.
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleType'
      responses:
        '204':
          description: Article type updated successfully.
    delete:
      summary: Delete an existing article type
      description: Delete an existing article type from the list.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the article type to delete.
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Article type deleted successfully.

  /api/articles:
    get:
      summary: Get all articles
      description: Retrieve the complete list of articles.
      responses:
        '200':
          description: Success, returns the complete list of articles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Articles'
    post:
      summary: Add a new article
      description: Add a new article to the list.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Articles'
      responses:
        '201':
          description: Article created successfully.
    put:
      summary: Update an existing article
      description: Update the details of an existing article.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the article to update.
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Articles'
      responses:
        '204':
          description: Article updated successfully.
    delete:
      summary: Delete an existing article
      description: Delete an existing article from the list.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the article to delete.
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Article deleted successfully.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        firstName:
          type: string
          example: "Darby"
        lastName:
          type: string
          example: "Bay"
        address:
          type: string
          example: "Amborogony"
        email:
          type: string
          example: "darby@example.com"
        phone:
          type: string
          example: "0324565372"
        creationDate:
          type: string
          format: date
          example: "2023-08-30"

    Orders:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        orderDate:
          type: string
          format: date
          example: "2023-08-30"
        payment:
          type: string
          example: "Credit Card"
        idUser:
          type: integer
          format: int32
          example: 1


    Contain:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        quantity:
          type: integer
          format: int32
          example: 3
        idOrder:
          type: integer
          format: int32
          example: 1
        idArticle:
          type: integer
          format: int32
          example: 2


    ArticleType:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        articleTypeName:
          type: string
          example: "Shoe"


    Articles:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        articleName:
          type: string
          example: "Air jordan"
        price:
          type: number
          format: double
          example: 15000.0
        stock:
          type: integer
          format: int32
          example: 19
        idArticleType:
          type: integer
          format: int32
          example: 1
